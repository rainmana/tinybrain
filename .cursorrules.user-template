# TinyBrain User Configuration Template
# Copy this to .cursorrules.user and customize for your specific needs

## üîß Your Custom MCP Server Requirements

### **REQUIRED MCP Servers (Edit as needed):**
```
# Core Security Assessment (REQUIRED):
- tinybrain: Core memory management and security assessment tracking

# Advanced Reasoning (RECOMMENDED for Claude 3.7+):
- clear-thought: For structured reasoning and hypothesis testing
- stochastic-thinking: For decision-making under uncertainty

# Additional Security Tools (Add as needed):
# - binary-ninja-mcp: For binary analysis and reverse engineering
# - playwright: For web application testing and automated exploitation
# - context7: For library documentation and API reference
# - [ADD YOUR CUSTOM SERVERS HERE]
```

### **Your Security Assessment Preferences:**
```
# Default Categories (customize as needed):
DEFAULT_CATEGORIES = [
    "vulnerability", "exploit", "payload", "technique", 
    "tool", "reference", "context", "hypothesis", 
    "evidence", "recommendation", "note"
]

# Priority Thresholds (customize as needed):
CRITICAL_PRIORITY = 9-10    # Requires immediate attention
HIGH_PRIORITY = 7-8         # Important security issues
MEDIUM_PRIORITY = 4-6       # Moderate security concerns
LOW_PRIORITY = 1-3          # Informational or minor issues

# Confidence Thresholds (customize as needed):
HIGH_CONFIDENCE = 0.8-1.0   # Certain findings
MEDIUM_CONFIDENCE = 0.5-0.7 # Probable findings
LOW_CONFIDENCE = 0.0-0.4    # Speculative findings
```

### **Your Workflow Preferences:**
```
# Assessment Phases (customize as needed):
PHASES = [
    "reconnaissance",
    "vulnerability_discovery", 
    "exploitation",
    "post_exploitation",
    "reporting"
]

# Notification Preferences:
ENABLE_HIGH_PRIORITY_ALERTS = true
ENABLE_DUPLICATE_ALERTS = true
ENABLE_CLEANUP_NOTIFICATIONS = true

# Export Preferences:
AUTO_EXPORT_ON_COMPLETION = true
INCLUDE_RELATIONSHIPS_IN_EXPORT = true
INCLUDE_CONTEXT_SNAPSHOTS_IN_EXPORT = true
```

## üéØ Your Custom Security Templates

### **Add Your Own Vulnerability Templates:**
```
# Example: Custom SQL Injection Template
{
    "name": "sql_injection_login",
    "title": "SQL Injection in Login Form",
    "content": "SQL injection vulnerability found in login form at [LOCATION]. The [PARAMETER] parameter is vulnerable to SQL injection attacks. This could allow attackers to bypass authentication or extract sensitive data from the database.",
    "category": "vulnerability",
    "priority": 9,
    "confidence": 0.9,
    "tags": ["sql-injection", "authentication", "critical"],
    "source": "manual-analysis"
}

# Add more templates here...
```

## üöÄ Your Custom Prompts

### **Starting Assessments:**
```
# Customize this prompt for your typical assessments:
I'm starting a [ASSESSMENT_TYPE] of [TARGET]. Please help me:

1. Create a TinyBrain session with name "[SESSION_NAME]"
2. Set up task progress tracking for [YOUR_PHASES]
3. Get security templates relevant to [TARGET_TYPE]
4. Create initial context snapshot

Then proceed with [YOUR_ANALYSIS_APPROACH], storing all findings in TinyBrain with proper categorization, priority, and confidence scores.
```

### **Your Exploit Development Approach:**
```
# Customize this for your exploit development style:
Based on our TinyBrain findings, please:

1. Search for vulnerabilities with priority >= [YOUR_THRESHOLD]
2. Develop [YOUR_EXPLOIT_TYPE] for the top [NUMBER] findings
3. Store exploit code in TinyBrain with relationships to vulnerabilities
4. Create [YOUR_REPORT_FORMAT] from TinyBrain data
5. Export session data for [YOUR_DOCUMENTATION_NEEDS]
```

## üîß Your Technical Preferences

### **Code Review Focus Areas:**
```
# Customize based on your expertise:
FOCUS_AREAS = [
    "authentication_bypass",
    "input_validation",
    "injection_vulnerabilities", 
    "session_management",
    "file_upload_security",
    "api_security",
    "cryptographic_issues",
    "business_logic_flaws"
]
```

### **Your Testing Methodology:**
```
# Customize your testing approach:
TESTING_METHODOLOGY = {
    "static_analysis": true,
    "dynamic_analysis": true,
    "manual_testing": true,
    "automated_tools": true,
    "exploit_development": true,
    "proof_of_concept": true
}
```

## üéØ Integration with Other Tools

### **Your External Tool Integration:**
```
# Add integrations with your preferred tools:
EXTERNAL_TOOLS = {
    "burp_suite": "For web application testing",
    "nmap": "For network reconnaissance", 
    "metasploit": "For exploit development",
    "custom_scripts": "For specialized testing",
    # Add your tools here...
}
```

### **Your Reporting Preferences:**
```
# Customize report generation:
REPORT_FORMAT = {
    "executive_summary": true,
    "technical_details": true,
    "exploit_code": true,
    "remediation_steps": true,
    "risk_assessment": true,
    "compliance_mapping": false  # Enable if needed
}
```

## üö® Your Quality Standards

### **Your Validation Requirements:**
```
# Customize quality checks:
QUALITY_CHECKS = {
    "min_findings_per_assessment": 5,
    "min_high_priority_findings": 2,
    "require_exploit_code": true,
    "require_remediation_steps": true,
    "validate_relationships": true,
    "check_for_duplicates": true
}
```

## üìù Usage Instructions

1. **Copy this template** to `.cursorrules.user`
2. **Edit the sections** to match your preferences
3. **Add your custom MCP servers** to the required list
4. **Customize prompts** for your typical workflows
5. **Add your security templates** for common patterns
6. **Set your quality standards** and validation requirements

## üéØ Remember

This configuration file helps ensure:
- **Consistent TinyBrain usage** across all security assessments
- **Proper integration** with your preferred MCP servers
- **Customized workflows** that match your methodology
- **Quality standards** that meet your requirements
- **Prevention of LLM loops** through structured reasoning tools

**Customize this template to make TinyBrain work perfectly for your specific security assessment needs!**
